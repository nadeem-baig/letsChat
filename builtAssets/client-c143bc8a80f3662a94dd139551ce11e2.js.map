)]}'
{"version":3,"sources":["media\\js\\client.js"],"names":[],"mappingssourcesContent":["//\n// LCB Client\n//\n\n(function(window, $, _) {\n\n    //\n    // Base\n    //\n    var Client = function(options) {\n        this.options = options;\n        this.status = new Backbone.Model();\n        this.user = new UserModel();\n        this.users = new UsersCollection();\n        this.rooms = new RoomsCollection();\n        this.events = _.extend({}, Backbone.Events);\n        return this;\n    };\n    //\n    // Account\n    //\n    Client.prototype.getUser = function() {\n        var that = this;\n        this.socket.emit('account:whoami', function(user) {\n            that.user.set(user);\n        });\n    };\n    Client.prototype.updateProfile = function(profile) {\n        var that = this;\n        this.socket.emit('account:profile', profile, function(user) {\n            that.user.set(user);\n        });\n    };\n\n    //\n    // Rooms\n    //\n    Client.prototype.createRoom = function(data) {\n        var that = this;\n        var room = {\n            name: data.name,\n            slug: data.slug,\n            description: data.description,\n            password: data.password,\n            participants: data.participants,\n            private: data.private\n        };\n        var callback = data.callback;\n        this.socket.emit('rooms:create', room, function(room) {\n            if (room && room.errors) {\n                swal(\"Unable to create room\",\n                     \"Room slugs can only contain lower case letters, numbers or underscores!\",\n                     \"error\");\n            } else if (room && room.id) {\n                that.addRoom(room);\n                that.switchRoom(room.id);\n            }\n            callback && callback(room);\n        });\n    };\n    Client.prototype.getRooms = function(cb) {\n        var that = this;\n        this.socket.emit('rooms:list', { users: true }, function(rooms) {\n            that.rooms.set(rooms);\n            // Get users for each room!\n            // We do it here for the room browser\n            _.each(rooms, function(room) {\n                if (room.users) {\n                    that.setUsers(room.id, room.users);\n                }\n            });\n\n            if (cb) {\n                cb(rooms);\n            }\n        });\n    };\n    Client.prototype.switchRoom = function(id) {\n        // Make sure we have a last known room ID\n        this.rooms.last.set('id', this.rooms.current.get('id'));\n        if (!id || id === 'list') {\n            this.rooms.current.set('id', 'list');\n            this.router.navigate('!/', {\n                replace: true\n            });\n            return;\n        }\n        var room = this.rooms.get(id);\n        if (room && room.get('joined')) {\n            this.rooms.current.set('id', id);\n            this.router.navigate('!/room/' + room.id, {\n                replace: true\n            });\n            return;\n        } else if(room) {\n            this.joinRoom(room, true);\n        } else {\n            this.joinRoom({id: id}, true);\n        }\n    };\n    Client.prototype.updateRoom = function(room) {\n        this.socket.emit('rooms:update', room);\n    };\n    Client.prototype.roomUpdate = function(resRoom) {\n        var room = this.rooms.get(resRoom.id);\n        if (!room) {\n            this.addRoom(resRoom);\n            return;\n        }\n        room.set(resRoom);\n    };\n    Client.prototype.addRoom = function(room) {\n        var r = this.rooms.get(room.id);\n        if (r) {\n            return r;\n        }\n        return this.rooms.add(room);\n    };\n    Client.prototype.archiveRoom = function(options) {\n        this.socket.emit('rooms:archive', options, function(data) {\n            if (data !== 'No Content') {\n                swal('Unable to Archive!',\n                     'Unable to archive this room!',\n                     'error');\n            }\n        });\n    };\n    Client.prototype.roomArchive = function(room) {\n        this.leaveRoom(room.id);\n        this.rooms.remove(room.id);\n    };\n    Client.prototype.rejoinRoom = function(room) {\n        this.joinRoom(room, undefined, true);\n    };\n    Client.prototype.lockJoin = function(id) {\n        if (_.contains(this.joining, id)) {\n            return false;\n        }\n\n        this.joining = this.joining || [];\n        this.joining.push(id);\n        return true;\n    };\n    Client.prototype.unlockJoin = function(id) {\n        var that = this;\n        _.defer(function() {\n            that.joining = _.without(that.joining, id);\n        });\n    };\n    Client.prototype.joinRoom = function(room, switchRoom, rejoin) {\n        if (!room || !room.id) {\n            return;\n        }\n\n        var that = this;\n        var id = room.id;\n        var password = room.password;\n\n        if (!rejoin) {\n            // Must not have already joined\n            var room1 = that.rooms.get(id);\n            if (room1 && room1.get('joined')) {\n                return;\n            }\n        }\n\n        if (!this.lockJoin(id)) {\n            return;\n        }\n\n        var passwordCB = function(password) {\n            room.password = password;\n            that.joinRoom(room, switchRoom, rejoin);\n        };\n\n        this.socket.emit('rooms:join', {roomId: id, password: password}, function(resRoom) {\n            // Room was likely archived if this returns\n            if (!resRoom) {\n                return;\n            }\n\n            if (resRoom && resRoom.errors &&\n                resRoom.errors === 'password required') {\n\n                that.passwordModal.show({\n                    roomName: resRoom.roomName,\n                    callback: passwordCB\n                });\n\n                that.unlockJoin(id);\n                return;\n            }\n\n            if (resRoom && resRoom.errors) {\n                that.unlockJoin(id);\n                return;\n            }\n\n            var room = that.addRoom(resRoom);\n            room.set('joined', true);\n\n            if (room.get('hasPassword')) {\n                that.getRoomUsers(room.id, _.bind(function(users) {\n                    this.setUsers(room.id, users);\n                }, that));\n            }\n\n            // Get room history\n            that.getMessages({\n                room: room.id,\n                since_id: room.lastMessage.get('id'),\n                take: 200,\n                expand: 'owner, room',\n                reverse: true\n            }, function(messages) {\n                messages.reverse();\n                that.addMessages(messages, !rejoin && !room.lastMessage.get('id'));\n                !rejoin && room.lastMessage.set(messages[messages.length - 1]);\n            });\n\n            if (that.options.filesEnabled) {\n                that.getFiles({\n                    room: room.id,\n                    take: 15\n                }, function(files) {\n                    files.reverse();\n                    that.setFiles(room.id, files);\n                });\n            }\n            // Do we want to switch?\n            if (switchRoom) {\n                that.switchRoom(id);\n            }\n            //\n            // Add room id to User Open rooms list.\n            //\n\n            var orooms = that.user.get('openRooms');\n            if ( ! _.contains(orooms,id)) {\n              orooms.push(id);\n            }\n            that.socket.emit('account:profile', {'openRooms': orooms });\n\n            that.unlockJoin(id);\n        });\n    };\n    Client.prototype.leaveRoom = function(id) {\n        var room = this.rooms.get(id);\n        if (room) {\n            room.set('joined', false);\n            room.lastMessage.clear();\n            if (room.get('hasPassword')) {\n                room.users.set([]);\n            }\n        }\n        this.socket.emit('rooms:leave', id);\n        if (id === this.rooms.current.get('id')) {\n            var room = this.rooms.get(this.rooms.last.get('id'));\n            this.switchRoom(room && room.get('joined') ? room.id : '');\n        }\n        // Remove room id from User open rooms list.\n        var orooms = this.user.get('openRooms');\n        orooms = _.without(orooms, id);\n        this.socket.emit('account:profile', {'openRooms': orooms});\n\n    };\n    Client.prototype.getRoomUsers = function(id, callback) {\n        this.socket.emit('rooms:users', {\n            room: id\n        }, callback);\n    };\n    //\n    // Messages\n    //\n    Client.prototype.addMessage = function(message) {\n        var room = this.rooms.get(message.room);\n        if (!room || !message) {\n            // Unknown room, nothing to do!\n            return;\n        }\n        room.set('lastActive', message.posted);\n        if (!message.historical) {\n            room.lastMessage.set(message);\n        }\n        room.trigger('messages:new', message);\n    };\n    Client.prototype.addMessages = function(messages, historical) {\n        _.each(messages, function(message) {\n            if (historical) {\n                message.historical = true;\n            }\n            this.addMessage(message);\n        }, this);\n    };\n    Client.prototype.sendMessage = function(message) {\n        this.socket.emit('messages:create', message);\n    };\n    Client.prototype.getMessages = function(query, callback) {\n        this.socket.emit('messages:list', query, callback);\n    };\n    //\n    // Files\n    //\n    Client.prototype.getFiles = function(query, callback) {\n        this.socket.emit('files:list', {\n            room: query.room || '',\n            take: query.take || 40,\n            expand: query.expand || 'owner'\n        }, callback);\n    };\n    Client.prototype.setFiles = function(roomId, files) {\n        if (!roomId || !files || !files.length) {\n            // Nothing to do here...\n            return;\n        }\n        var room = this.rooms.get(roomId);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.files.set(files);\n    };\n    Client.prototype.addFile = function(file) {\n        var room = this.rooms.get(file.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.files.add(file);\n    };\n    //\n    // Users\n    //\n    Client.prototype.setUsers = function(roomId, users) {\n        if (!roomId || !users || !users.length) {\n            // Data is not valid\n            return;\n        }\n        var room = this.rooms.get(roomId);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.set(users);\n    };\n    Client.prototype.addUser = function(user) {\n        var room = this.rooms.get(user.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.add(user);\n    };\n    Client.prototype.removeUser = function(user) {\n        var room = this.rooms.get(user.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.remove(user.id);\n    };\n    Client.prototype.updateUser = function(user) {\n        // Update if current user\n        if (user.id == this.user.id) {\n            this.user.set(user);\n        }\n        // Update all rooms\n        this.rooms.each(function(room) {\n            var target = room.users.findWhere({\n                id: user.id\n            });\n            target && target.set(user);\n        }, this);\n    };\n    Client.prototype.getUsersSync = function() {\n        if (this.users.length) {\n            return this.users;\n        }\n\n        var that = this;\n\n        function success(users) {\n            that.users.set(users);\n        }\n\n        $.ajax({url:'./users', async: false, success: success});\n\n        return this.users;\n    };\n    //\n    // Extras\n    //\n    Client.prototype.getEmotes = function(callback) {\n        this.extras = this.extras || {};\n        if (!this.extras.emotes) {\n            // Use AJAX, so we can take advantage of HTTP caching\n            // Also, it's a promise - which ensures we only load emotes once\n            this.extras.emotes = $.get('./extras/emotes');\n        }\n        if (callback) {\n            this.extras.emotes.done(callback);\n        }\n    };\n    Client.prototype.getReplacements = function(callback) {\n        this.extras = this.extras || {};\n        if (!this.extras.replacements) {\n            // Use AJAX, so we can take advantage of HTTP caching\n            // Also, it's a promise - which ensures we only load emotes once\n            this.extras.replacements = $.get('./extras/replacements');\n        }\n        if (callback) {\n            this.extras.replacements.done(callback);\n        }\n    };\n\n    //\n    // Router Setup\n    //\n    Client.prototype.route = function() {\n        var that = this;\n        var Router = Backbone.Router.extend({\n            routes: {\n                '!/room/': 'list',\n                '!/room/:id': 'join',\n                '*path': 'list'\n            },\n            join: function(id) {\n                that.switchRoom(id);\n            },\n            list: function() {\n                that.switchRoom('list');\n            }\n        });\n        this.router = new Router();\n        Backbone.history.start();\n    };\n    //\n    // Listen\n    //\n    Client.prototype.listen = function() {\n        var that = this;\n\n        function joinRooms(rooms) {\n            //\n            // Join rooms from User's open Rooms List.\n            // We need to check each room is available before trying to join\n            //\n            var roomIds = _.map(rooms, function(room) {\n                return room.id;\n            });\n\n            var openRooms = that.user.get('openRooms') || [];\n\n            // Let's open some rooms!\n            _.defer(function() {\n                //slow down because router can start a join with no password\n                _.each(openRooms, function(id) {\n                    if (_.contains(roomIds, id)) {\n                        that.joinRoom({ id: id });\n                    }\n                });\n            }.bind(this));\n        }\n\n        var path = '/' + _.compact(\n            window.location.pathname.split('/').concat(['socket.io'])\n        ).join('/');\n\n        //\n        // Socket\n        //\n        this.socket = io.connect({\n            path: path,\n            reconnection: true,\n            reconnectionDelay: 500,\n            reconnectionDelayMax: 1000,\n            timeout: 3000\n        });\n        this.socket.on('connect', function() {\n            that.getUser();\n            that.getRooms(joinRooms);\n            that.status.set('connected', true);\n        });\n        this.socket.on('reconnect', function() {\n            _.each(that.rooms.where({ joined: true }), function(room) {\n                that.rejoinRoom(room);\n            });\n        });\n        this.socket.on('messages:new', function(message) {\n            that.addMessage(message);\n        });\n        this.socket.on('rooms:new', function(data) {\n            that.addRoom(data);\n        });\n        this.socket.on('rooms:update', function(room) {\n            that.roomUpdate(room);\n        });\n        this.socket.on('rooms:archive', function(room) {\n            that.roomArchive(room);\n        });\n        this.socket.on('users:join', function(user) {\n            that.addUser(user);\n        });\n        this.socket.on('users:leave', function(user) {\n            that.removeUser(user);\n        });\n        this.socket.on('users:update', function(user) {\n            that.updateUser(user);\n        });\n        this.socket.on('files:new', function(file) {\n            that.addFile(file);\n        });\n        this.socket.on('disconnect', function() {\n            that.status.set('connected', false);\n        });\n        //\n        // GUI\n        //\n        this.events.on('messages:send', this.sendMessage, this);\n        this.events.on('rooms:update', this.updateRoom, this);\n        this.events.on('rooms:leave', this.leaveRoom, this);\n        this.events.on('rooms:create', this.createRoom, this);\n        this.events.on('rooms:switch', this.switchRoom, this);\n        this.events.on('rooms:archive', this.archiveRoom, this);\n        this.events.on('profile:update', this.updateProfile, this);\n        this.events.on('rooms:join', this.joinRoom, this);\n    };\n    //\n    // Start\n    //\n    Client.prototype.start = function() {\n        this.getEmotes();\n        this.getReplacements();\n        this.listen();\n        this.route();\n        this.view = new window.LCB.ClientView({\n            client: this\n        });\n        this.passwordModal = new window.LCB.RoomPasswordModalView({\n            el: $('#lcb-password')\n        });\n        return this;\n    };\n    //\n    // Add to window\n    //\n    window.LCB = window.LCB || {};\n    window.LCB.Client = Client;\n})(window, $, _);"],"sourceRoot":"/"}